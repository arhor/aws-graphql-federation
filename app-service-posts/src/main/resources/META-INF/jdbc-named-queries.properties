# suppress inspection "SqlResolve" for whole file

# language=SQL
TagEntity.findAllByPostIdIn=\
       SELECT pht.post_id AS "post_id", ARRAY_AGG(t.name) AS "tags" \
         FROM tags t \
         JOIN posts_have_tags pht ON t.id = pht.tag_id \
        WHERE pht.post_id IN (:postIds) \
     GROUP BY pht.post_id

# language=SQL
PostProjection.findAllByUserIdIn=\
    SELECT p.id \
         , p.user_id \
         , p.title \
         , p.content \
      FROM posts p \
     WHERE p.user_id IN (:#{#userIds.isEmpty() ? NULL : #userIds})

# language=SQL
PostProjection.findPageByTagsContaining=\
      SELECT p.id \
           , p.user_id \
           , p.title \
           , p.content \
        FROM posts p \
        JOIN ( \
                   SELECT pht.post_id \
                     FROM posts_have_tags pht \
                     JOIN tags t ON t.id = pht.tag_id \
                      AND t.name IN (:#{#tags.isEmpty() ? NULL : #tags}) \
                 GROUP BY pht.post_id \
                   HAVING COUNT(pht.tag_id) = :#{#tags.size()} \
             ) AS tagged_posts ON p.id = tagged_posts.post_id \
    ORDER BY p.created_date_time DESC \
       LIMIT :limit \
      OFFSET :offset

# language=SQL
PostProjection.countByTagsContaining=\
    SELECT COUNT(*) \
      FROM posts p \
      JOIN ( \
                 SELECT pht.post_id \
                   FROM posts_have_tags pht \
                   JOIN tags t ON pht.tag_id = t.id \
                    AND t.name IN (:#{#tags.isEmpty() ? NULL : #tags}) \
               GROUP BY pht.post_id \
                 HAVING COUNT(pht.tag_id) = :#{#tags.size()} \
           ) AS tagged_posts ON p.id = tagged_posts.post_id

# language=SQL
OutboxMessageEntity.dequeueOldest=\
       DELETE \
         FROM outbox_messages om_outer \
        WHERE om_outer.id IN \
              ( \
                       SELECT om_inner.id \
                         FROM outbox_messages om_inner \
                        WHERE om_inner.type = :messageType \
                     ORDER BY om_inner.created_date_time \
                   FOR UPDATE \
                  SKIP LOCKED \
                        LIMIT :messagesNum \
              ) \
    RETURNING om_outer.id \
            , om_outer.type \
            , om_outer.data \
            , om_outer.trace_id \
            , om_outer.created_date_time;
