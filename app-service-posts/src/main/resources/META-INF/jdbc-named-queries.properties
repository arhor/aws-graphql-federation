# suppress inspection "SqlResolve" for whole file

# language=SQL
TagEntity.findAllByPostIdIn=\
       SELECT pht.post_id \
            , ARRAY_AGG(t.name) AS tag_ids \
         FROM tags t \
         JOIN posts_have_tags pht ON pht.tag_id = t.id \
        WHERE pht.post_id IN (:postIds) \
     GROUP BY pht.post_id

# language=SQL
PostEntity.findAllByUserIdIn=\
       SELECT p.id \
            , p.user_id \
            , p.title \
            , p.content \
            , p.version \
            , p.created_date_time \
            , p.updated_date_time \
            , COALESCE(tags_by_post.ids, ARRAY[]::UUID[]) AS tags_ids \
            , COALESCE(like_by_post.ids, ARRAY[]::UUID[]) AS like_ids \
         FROM posts p \
    LEFT JOIN ( \
                    SELECT pht.post_id \
                         , ARRAY_AGG(pht.tag_id) AS ids \
                      FROM posts_have_tags pht \
                  GROUP BY pht.post_id \
              ) tags_by_post ON p.id = tags_by_post.post_id \
    LEFT JOIN ( \
                    SELECT phul.post_id \
                         , ARRAY_AGG(phul.user_id) AS ids \
                      FROM posts_have_user_likes phul \
                  GROUP BY phul.post_id \
              ) like_by_post ON p.id = like_by_post.post_id \
        WHERE p.user_id IN (:#{#userIds.isEmpty() ? NULL : #userIds})

# language=SQL
PostEntity.findPageByTagsContaining=\
       SELECT p.id \
            , p.user_id \
            , p.title \
            , p.content \
            , p.version \
            , p.created_date_time \
            , p.updated_date_time \
            , COALESCE(tags_by_post.ids, ARRAY[]::UUID[]) AS tags_ids \
            , COALESCE(like_by_post.ids, ARRAY[]::UUID[]) AS like_ids \
         FROM posts p \
         JOIN ( \
                    SELECT pht.post_id \
                      FROM posts_have_tags pht \
                      JOIN tags t ON t.id = pht.tag_id \
                       AND t.name IN (:#{#tags.isEmpty() ? NULL : #tags}) \
                  GROUP BY pht.post_id \
                    HAVING COUNT(pht.tag_id) = :#{#tags.size()} \
              ) AS tagged_posts ON p.id = tagged_posts.post_id \
    LEFT JOIN ( \
                    SELECT pht.post_id \
                         , ARRAY_AGG(pht.tag_id) AS ids \
                      FROM posts_have_tags pht \
                  GROUP BY pht.post_id \
              ) tags_by_post ON p.id = tags_by_post.post_id \
    LEFT JOIN ( \
                    SELECT phul.post_id \
                         , ARRAY_AGG(phul.user_id) AS ids \
                      FROM posts_have_user_likes phul \
                  GROUP BY phul.post_id \
              ) like_by_post ON p.id = like_by_post.post_id \
     ORDER BY p.created_date_time DESC \
        LIMIT :limit \
       OFFSET :offset

# language=SQL
PostEntity.countByTagsContaining=\
    SELECT COUNT(*) \
      FROM posts p \
      JOIN ( \
                 SELECT pht.post_id \
                   FROM posts_have_tags pht \
                   JOIN tags t ON t.id = pht.tag_id \
                    AND t.name IN (:#{#tags.isEmpty() ? NULL : #tags}) \
               GROUP BY pht.post_id \
                 HAVING COUNT(pht.tag_id) = :#{#tags.size()} \
           ) AS tagged_posts ON p.id = tagged_posts.post_id

# language=SQL
OutboxMessageEntity.findOldestMessagesWithLock=\
         SELECT om.id, \
                om.type, \
                om.data, \
                om.trace_id, \
                om.created_date_time \
           FROM outbox_messages om \
       ORDER BY om.created_date_time \
     FOR UPDATE \
    SKIP LOCKED \
          LIMIT :limit
