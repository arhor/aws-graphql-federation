# suppress inspection "SqlResolve" for whole file

# language=SQL
TagEntity.findAllByPostIdIn=\
        SELECT pht.post_id AS "post_id", ARRAY_AGG(t.name) AS "tags" \
          FROM tags t \
    RIGHT JOIN posts_has_tags pht ON t.id = pht.tag_id \
         WHERE pht.post_id IN (:postIds) \
      GROUP BY pht.post_id

# language=SQL
PostProjection.findAllByUserIdIn=\
    SELECT p.id \
         , p.user_id \
         , p.title \
         , p.content \
         , p.options \
      FROM posts p \
     WHERE p.user_id IN (:#{#userIds.isEmpty() ? NULL : #userIds})

# language=SQL
PostProjection.findPageByTagsContaining=\
    SELECT p.id \
         , p.user_id \
         , p.title \
         , p.content \
         , p.options \
      FROM posts p \
     WHERE p.id IN \
           ( \
               SELECT pht.post_id \
                 FROM posts_has_tags pht \
                 JOIN tags t ON t.id = pht.tag_id \
                WHERE t.name IN (:#{#tags.isEmpty() ? NULL : #tags}) \
           ) \
     LIMIT :limit \
    OFFSET :offset

# language=SQL
PostProjection.countByTagsContaining=\
    SELECT COUNT(p) \
      FROM posts p \
      JOIN posts_has_tags pht ON pht.tag_id = p.id \
      JOIN tags t ON t.id = pht.tag_id \
     WHERE t.name IN (:#{#tags.isEmpty() ? NULL : #tags})

# language=SQL
OutboxMessageEntity.dequeueOldest=\
       DELETE \
         FROM outbox_messages om_outer \
        WHERE om_outer.id IN \
              ( \
                       SELECT om_inner.id \
                         FROM outbox_messages om_inner \
                        WHERE om_inner.type = :messageType \
                     ORDER BY om_inner.created_date_time \
                   FOR UPDATE \
                  SKIP LOCKED \
                        LIMIT :messagesNum \
              ) \
    RETURNING om_outer.id \
            , om_outer.type \
            , om_outer.data \
            , om_outer.trace_id \
            , om_outer.created_date_time;
