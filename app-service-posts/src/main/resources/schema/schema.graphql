# noinspection GraphQLTypeRedefinition
# noinspection GraphQLMemberRedefinition
# noinspection DgsEntityFetcherInspector

scalar UUID

# ---------- Root Types (Query/Mutation/Subscription) ----------

type Query {
    post(id: UUID!): Post
    posts(input: PostsLookupInput! = {}): PostPage
}

type Mutation {
    createPost(input: CreatePostInput!): Post!
    updatePost(input: UpdatePostInput!): Post!
    deletePost(input: DeletePostInput!): Boolean!

    switchUserPosts(input: SwitchUserPostsInput!): Boolean!
}

# ---------- Input Types ----------

input PostsLookupInput {
    page: Int! = 0    @Range(min: 0, max: 2147483647)
    size: Int! = 20   @Range(min: 1, max: 100)
    tags: [TagInput!] @NotEmpty
}

input CreatePostInput {
    title: String!    @NotBlank @Size(min: 1, max: 512)
    content: String!  @NotBlank @Size(min: 1, max: 4096)
    tags: [TagInput!] @Size(min: 0, max: 15)
}

input UpdatePostInput {
    id: UUID!
    title: String     @NotBlank @Size(min: 1, max: 512)
    content: String   @NotBlank @Size(min: 1, max: 4096)
    tags: [TagInput!] @Size(min: 0, max: 15)
}

input DeletePostInput {
    id: UUID!
}

input SwitchUserPostsInput {
    userId: UUID!
    disabled: Boolean!
}

input TagInput {
    name: String! @NotBlank @Size(min: 1, max: 50) @Pattern(regexp: "^[a-zA-Z\\s]{1,50}$")
}

# ---------- Domain Types ----------

type Post @key(fields: "id") {
    id: UUID!
    userId: UUID
    title: String!
    content: String!
    tags: [String!]
}

type PostPage {
    data: [Post!]
    page: Int
    size: Int
    hasPrev: Boolean
    hasNext: Boolean
}

# ---------- Federated Types ----------

type User @key(fields: "id") @extends {
    id: UUID! @external
    posts: [Post!]
    postsDisabled: Boolean
}

# ---------- Directives ----------

directive @NotBlank(
    message: String! = "graphql.validation.NotBlank.message"
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotEmpty(
    message: String! = "graphql.validation.NotEmpty.message"
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Range(
    min: Int! = 0
    max: Int! = 2147483647
    message: String! = "graphql.validation.Range.message"
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Size(
    min: Int! = 0
    max: Int! = 2147483647
    message: String! = "graphql.validation.Size.message"
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Pattern(
    regexp : String!
    message : String! = "graphql.validation.Pattern.message"
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
